# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt6 import QtCore, QtGui, QtWidgets
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt6 import QtWidgets
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.colors import LinearSegmentedColormap
from loading.gerber_load import *
from gui.loading_bar import LoadingScreen

import numpy as np


class Ui_MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        self.run_verification = True
        super().__init__()
    def setupUi(self, MainWindow):

        self.output_group_box_x = 900  # Size of the output group box in the x direction
        self.output_group_box_y = 900  # Size of the output group box in the y direction

        MainWindow.setObjectName("MainWindow")  # Set the object name of the MainWindow
        MainWindow.resize(1605, 1100)  # Resize the MainWindow

        # Create the main widget
        self.mainwidget = QtWidgets.QWidget(parent=MainWindow)
        self.mainwidget.setObjectName("mainwidget")

        # Place the gerber folder line edit and button
        self.place_gerber_folder()
        # Place the bitmap save folder line edit and button
        self.place_bitmap_save_folder()

        #

        self.place_scroll_widget()
        self.place_graphical_view_()
        # Place the recolor button
        self.place_color_buttons()
        # Place the graphical view
        # self.graph_placement()

        self.recolor_button = QtWidgets.QPushButton(parent=self.mainwidget)
        self.recolor_button.setGeometry(QtCore.QRect(120, 440, 75, 24))
        self.recolor_button.setObjectName("Recolor")

        self.menu_setup()
        self.place_submit_button()
        self.graph_view_box = QtWidgets.QGroupBox(parent=self.mainwidget)
        self.graph_view_box.setGeometry(QtCore.QRect(690, 50, self.output_group_box_x, self.output_group_box_y))
        self.graph_view_box.setObjectName("graph_view_box")
        self.retranslateUi(MainWindow)
        self.place_graphical_view_()

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def menu_setup(self):
        MainWindow.setCentralWidget(self.mainwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1575, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(parent=self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuSettings = QtWidgets.QMenu(parent=self.menubar)
        self.menuSettings.setObjectName("menuSettings")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.loading_bar = QtWidgets.QProgressBar()
        self.loading_bar.setMaximum(100)
        self.loading_bar.setValue(0)

        # Add the QProgressBar to the status bar
        self.statusbar.addPermanentWidget(self.loading_bar)




        self.actionNew = QtGui.QAction(parent=MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtGui.QAction(parent=MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionInput_Gerber = QtGui.QAction(parent=MainWindow)
        self.actionInput_Gerber.setObjectName("actionInput_Gerber")
        self.actionInput_Tiffs = QtGui.QAction(parent=MainWindow)
        self.actionInput_Tiffs.setObjectName("actionInput_Tiffs")
        self.actionUndo_Last_Action = QtGui.QAction(parent=MainWindow)
        self.actionUndo_Last_Action.setObjectName("actionUndo_Last_Action")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuEdit.addAction(self.actionUndo_Last_Action)
        self.menuSettings.addAction(self.actionInput_Gerber)
        self.menuSettings.addAction(self.actionInput_Tiffs)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())


    #########################################################
    ################# Place the widgets #####################
    #########################################################
    def place_gerber_folder(self):
        # Place line edit for gerber folder
        self.gerber_folder_line_edit = QtWidgets.QLineEdit(parent=self.mainwidget)
        self.gerber_folder_line_edit.setEnabled(True)
        self.gerber_folder_line_edit.setGeometry(QtCore.QRect(10, 10, 531, 21))
        self.gerber_folder_line_edit.setObjectName("gerber_folder_line_edit")
        # Place the gerber folder button
        # Connect the buttons to the functions
        self.gerber_folder_button = QtWidgets.QPushButton(parent=self.mainwidget, text="Gerber Folder")
        self.gerber_folder_button.clicked.connect(lambda x: self.start_loading(self.gerber_folder_button_clicked))

        self.gerber_folder_button.setGeometry(QtCore.QRect(550, 10, 111, 21))
        self.gerber_folder_button.setObjectName("gerber_folder_button")

    def place_graph(self):
        self.graphicsView = QtWidgets.QGraphicsView(self.graph_view_box)
        self.graphicsView.setGeometry(QtCore.QRect(10, 20, 751, 601))
        self.graphicsView.setObjectName("graphicsView")

    def place_color_buttons(self):
        self.color_info = {}

        color_labels = [QtWidgets.QLabel(self.mainwidget),
                        QtWidgets.QLineEdit(self.mainwidget), QtWidgets.QLineEdit(self.mainwidget),
                        QtWidgets.QLineEdit(self.mainwidget), QtWidgets.QLineEdit(self.mainwidget),
                        QtWidgets.QLineEdit(self.mainwidget), QtWidgets.QLineEdit(self.mainwidget),
                        QtWidgets.QLineEdit(self.mainwidget), QtWidgets.QLineEdit(self.mainwidget),
                        QtWidgets.QLabel(self.mainwidget)]
        qt_checkboxes = [QtWidgets.QCheckBox(self.mainwidget) for i in range(10)]
        colors = ['#FF0000', '#FF4040', '#FF8080', '#FFBFBF', '#FFFFFF', '#CCCCFF', '#9999FF', '#6666FF', '#3333FF',
                  '#0000FF']
        for i, _ in enumerate(color_labels):
            y_start = 50
            self.color_info[i] = {}
            if i == 0:
                color_labels[i].setText("100%")
            elif i == len(color_labels) - 1:
                color_labels[i].setText("0%")

            qt_checkboxes[i].setGeometry(QtCore.QRect(130, y_start + 6 + i * 30, 71, 21))
            color_labels[i].setGeometry(QtCore.QRect(20, y_start + 4 + i * 30, 51, 21))
            self.color_info[i]['color_button'] = QtWidgets.QPushButton(parent=self.mainwidget)
            self.color_info[i]['color_button'].setGeometry(QtCore.QRect(90, y_start + i * 30, 30, 30))
            self.color_info[i]['color_button'].clicked.connect(lambda x, i=i: self.on_color_box_clicked(i))
            self.color_info[i]['color_button'].setStyleSheet(f"background-color: {colors[i]}")

    def place_submit_button(self):
        self.submit_button = QtWidgets.QPushButton(parent=self.mainwidget)
        self.submit_button.setText("Submit")
        self.submit_button.setGeometry(QtCore.QRect(MainWindow.width() // 2, MainWindow.height() - 90, 100, 30))
        self.submit_button.clicked.connect(self.submit_button_clicked)

    def place_graphical_view_(self):
        self.graph_view_box = QtWidgets.QGroupBox(parent=self.mainwidget)
        self.graph_view_box.setGeometry(QtCore.QRect(690, 50, self.output_group_box_x, self.output_group_box_y))
        self.graph_view_box.setObjectName("graph_view_box")

    def place_bitmap_save_folder(self):
        # Place line edit for bitmap save folder
        self.bitmap_to_save_line_edit = QtWidgets.QLineEdit(parent=self.mainwidget)
        self.bitmap_to_save_line_edit.setGeometry(QtCore.QRect(690, 10, 551, 21))
        self.bitmap_to_save_line_edit.setObjectName("bitmap_to_save_line_edit")
        # Place the bitmap save button
        self.bitmap_save_button = QtWidgets.QPushButton(parent=self.mainwidget)
        self.bitmap_save_button.setGeometry(QtCore.QRect(1250, 10, 121, 21))
        self.bitmap_save_button.setObjectName("bitmap_save_button")
        self.bitmap_save_button.clicked.connect(self.bitmap_save_button_clicked)

    def place_scroll_widget(self):
        # Place the scroll area
        self.scrollArea = QtWidgets.QScrollArea(parent=self.mainwidget)
        self.scrollArea.setGeometry(QtCore.QRect(410, 80, 200, 601))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        # Place the scroll area widget contents
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.layout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.scrollAreaWidgetContents.setLayout(self.layout)

        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 139, 599))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

    def get_checked_files(self):
        checked_files = []
        for i in range(self.layout.count()):
            widget = self.layout.itemAt(i).widget()
            if widget and widget.isChecked():
                checked_files.append(widget.text())
        return checked_files

    # Add the retranslateUi function
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Cu Balancing"))
        self.gerber_folder_button.setText(_translate("MainWindow", "Gerber Folder"))
        self.bitmap_save_button.setText(_translate("MainWindow", "Bitmap Save Folder"))
        self.graph_view_box.setTitle(_translate("MainWindow", "Output", None))
        self.recolor_button.setText(_translate("MainWindow", "Recolor"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionInput_Gerber.setText(_translate("MainWindow", "Input Gerber"))
        self.actionInput_Tiffs.setText(_translate("MainWindow", "Input Tiffs"))
        self.actionUndo_Last_Action.setText(_translate("MainWindow", "Undo Last Action"))

    #########################################################
    ################# Action functions ######################
    #########################################################
    def gerber_folder_button_clicked(self):
        # self.folder_name = QtWidgets.QFileDialog.getExistingDirectory(self.mainwidget, "Select Folder")

        # options |= QtWidgets.QFileDialog.DontUseNativeDialog
        # self.loading_screen.progressBar.setMaximum(len(os.listdir(self.folder_name)))
        if self.folder_name:
            self.gerber_folder_line_edit.setText(self.folder_name)

            self.clear_layout(self.layout)
            for idx, i in enumerate(os.listdir(self.folder_name)):
                if self.run_verification:
                    if verify_gerber(os.path.join(self.folder_name, i)):
                        checkbox = QtWidgets.QCheckBox(f"{i}")
                        self.layout.addWidget(checkbox)
                else:
                    checkbox = QtWidgets.QCheckBox(f"{i}")
                    self.layout.addWidget(checkbox)
                # self.loading_screen.set_progress(idx, f"Please Wait Loading... {i}%")
        # self.loading_screen.close()


    def bitmap_save_button_clicked(self):
        self.bitmap_save_folder = QtWidgets.QFileDialog.getExistingDirectory(self.mainwidget, "Select Folder")
        self.bitmap_to_save_line_edit.setText(self.bitmap_save_folder)

    def on_color_box_clicked(self, i):
        button = self.color_info[i]['color_button']
        # button = self.mainwidget.sender()
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            button.setStyleSheet(f"background-color: {color.name()}")

    def submit_button_clicked(self):
        # Generate some data for the image
        data = np.random.rand(10, 10)

        # Create a QColorDialog instance
        # color_dialog = QtWidgets.QColorDialog()

        # Open the color dialog five times and get the colors selected by the user
        # colors = [color_dialog.getColor().name() for _ in range(2)]

        # Create a custom color map with the selected colors
        # cmap = LinearSegmentedColormap.from_list('custom_cmap', colors)

        # Create a Figure instance and an axes instance in the figure
        fig = Figure()
        ax = fig.add_subplot(111)

        # Display the data as an image
        im = ax.imshow(data, )  # cmap=cmap)

        # Turn off the axis
        ax.axis('off')

        # Adjust the subplot parameters to make the graph take up the whole frame
        fig.subplots_adjust(left=0, bottom=0, right=1.1, top=1, wspace=1, hspace=2)

        # Add a color bar to the plot
        fig.colorbar(im, ax=ax, shrink=0.4)

        # Create a FigureCanvasQTAgg instance with the figure
        canvas = FigureCanvas(fig)

        # Create a NavigationToolbar2QT instance with the FigureCanvasQTAgg instance
        toolbar = NavigationToolbar(canvas, self.graph_view_box)

        # Create a QVBoxLayout instance
        layout = QtWidgets.QVBoxLayout()

        # Add the NavigationToolbar2QT instance to the QVBoxLayout
        layout.addWidget(toolbar)

        # Add the FigureCanvasQTAgg instance to the QVBoxLayout
        layout.addWidget(canvas)
        #
        # Set the QVBoxLayout as the layout for the QGroupBox
        self.graph_view_box.setLayout(layout)
        self.graph_view_box.show()
        # self.graph_view_box.setStyleSheet("background-color: white")
        # self.button = QtWidgets.QPushButton(parent=self.graph_view_box)

        # Set the text and object name for the button

        # self.graph_view_layout = QtWidgets.QVBoxLayout(self.graph_view_box)
        # self.graph_view_layout.addWidget(self.canvas)
        #
        # # self.graph_view_box.setLayout(self.graph_view_layout)
        # # self.toolbar = NavigationToolbar(self.canvas)
        # # self.graph_view_layout.addWidget(self.toolbar)
        #
        # # Set the QVBoxLayout as the layout for the QGroupBox
        # self.graph_view_box.setLayout(self.graph_view_layout)

    def clear_layout(self, layout):
        while layout.count():
            child = layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

    def start_loading(self, function):
        if function == self.gerber_folder_button_clicked:
            self.folder_name = QtWidgets.QFileDialog.getExistingDirectory(self.mainwidget, "Select Folder")
            self.loading_screen = LoadingScreen()
    #     self.loading_screen = LoadingScreen()
    #     self.loading_screen.cancel_requested.connect(self.stop_loading)
    #
    #     # Show the loading screen
    #     self.loading_screen.show()
    #     self.loading_screen.raise_()
    #
    #     # Create a QThread
    #     self.thread = QtCore.QThread(self)
    #
    #     # Move the loading screen to the QThread
    #     self.loading_screen.moveToThread(self.thread)
    #
    #     # Start the QThread
    #     self.thread.started.connect(function)
    #     self.thread.start()
    def stop_loading(self):
        # Stop the QThread
        print('Hello')
        self.thread.terminate()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
